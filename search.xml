<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1093: 验证哥德巴赫猜想(函数专题)</title>
    <url>/2020/11/24/1093-%E9%AA%8C%E8%AF%81%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3-%E5%87%BD%E6%95%B0%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1093-验证哥德巴赫猜想（函数专题）"><a href="#1093-验证哥德巴赫猜想（函数专题）" class="headerlink" title="1093: 验证哥德巴赫猜想（函数专题）"></a>1093: 验证哥德巴赫猜想（函数专题）</h3><p>哥德巴赫猜想大家都知道一点吧。我们现在不是想证明这个结论，而是对于任给的一个不小于6的偶数，来寻找和等于该偶数的所有素数对。做好了这件实事,就能说明这个猜想是成立的。<br>要求程序定义一个prime()函数和一个main()函数，prime()函数判断一个整数n是否是素数，其余功能在main()函数中实现。<br>int prime(int n)<br>{<br>//判断n是否为素数， 若n为素数，本函数返回1，否则返回0<br>}</p>
<p><strong>对于C/C++代码的提交，本题要求必须通过定义prime函数和main函数实现，否则，提交编译错误，要提交完整的程序。</strong></p>
<p>一个偶数M (M是6到1000000之间的一个偶数).</p>
<p>输出和等于该偶数的所有素数对a和b，按a递增的顺序输出，(a,b)和(b,a)被视为同一个素数对。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40</span><br><span class="line">输出</span><br><span class="line">3 37</span><br><span class="line">11 29</span><br><span class="line">17 23</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=m/<span class="number">2</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime(i)&amp;&amp;prime(m-i))&#123; <span class="comment">//判断 两者是否都为素数</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,m-i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断素数  除了1和它本身 没有其他除数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i,k;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	k=<span class="built_in">sqrt</span>(n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=k;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>1096 水仙花数(函数专题)</title>
    <url>/2020/11/29/1096-%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0-%E5%87%BD%E6%95%B0%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1096-水仙花数（函数专题）"><a href="#1096-水仙花数（函数专题）" class="headerlink" title="1096: 水仙花数（函数专题）"></a>1096: 水仙花数（函数专题）</h3><p>春天是鲜花的季节，水仙花就是其中最迷人的代表，数学上有个水仙花数，他是这样定义的：<br>“水仙花数”是指一个三位数，它的各位数字的立方和等于其本身，比如：153=13+53+33。<br>现在要求输出所有在m和n范围内的水仙花数。 </p>
<p>要求程序定义一个narcissus()函数和一个main()函数，narcissus()函数判断一个整数n是否为水鲜花数，其余功能在main()函数中实现。</p>
<p>int narcissus(int n)<br>    {<br>       //判断n是否为水仙花数， 若是函数返回1，否则返回0<br>     }</p>
<p><strong>对于C/C++代码的提交，本题要求必须通过定义narcissus函数和main函数实现，否则，提交编译错误，要提交完整的程序。</strong></p>
<p>输入数据有多组，每组占一行，包括两个整数m和n（100&lt;=m&lt;=n&lt;=999）。</p>
<p>对于每个测试实例，要求输出所有在给定范围内的水仙花数，就是说，输出的水仙花数必须大于等于m,并且小于等于n，如果有多个，则要求从小到大排列在一行内输出，之间用一个空格隔开;<br>如果给定的范围内不存在水仙花数，则输出no;<br>每个测试实例的输出占一行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100 120</span><br><span class="line">300 380</span><br><span class="line">输出</span><br><span class="line">no</span><br><span class="line">370 371</span><br></pre></td></tr></table></figure>

<p>在不知道m到n之间有多少个水仙花数的情况下，如何控制两个数之间有空格，而最后一个水仙花数之后没有空格？解决方法之一是：第一个水仙花数之前不加空格，而其后每个水仙花数之前加空格。而通过一个标识变量可以判断出是否是第一个水仙花数。<br>初做多实例测试，要注意变量赋初值的位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">narcissus</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> g,s,b;</span><br><span class="line">	g=n%<span class="number">10</span>; <span class="comment">//得到个位数</span></span><br><span class="line">	s=(n/<span class="number">10</span>)%<span class="number">10</span>;<span class="comment">//得到十位数</span></span><br><span class="line">	b=n/<span class="number">100</span>; <span class="comment">//得到百位数</span></span><br><span class="line">	<span class="keyword">if</span>(g*g*g+s*s*s+b*b*b==n)&#123; <span class="comment">//水仙花数判定</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,flag;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n)!=EOF)&#123; <span class="comment">//多实例 输入测试</span></span><br><span class="line">		flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)&#123;<span class="comment">//m-n的数进行筛选</span></span><br><span class="line">			<span class="keyword">if</span>(narcissus(i)==<span class="number">1</span>)&#123; <span class="comment">//说明为水仙花数 </span></span><br><span class="line">				<span class="keyword">if</span>(flag==<span class="number">1</span>)&#123; <span class="comment">//标记用于最后if输出</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);  <span class="comment">//如果是水仙花就输出</span></span><br><span class="line">					flag=<span class="number">0</span>;  <span class="comment">//将下一个标记改为 0 </span></span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i); <span class="comment">//用于判断下一个数是否为水仙花 因为前面 如果是水仙花数的话 将falg=0了</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>1105: 判断友好数对(函数专题)</title>
    <url>/2020/12/01/1105-%E5%88%A4%E6%96%AD%E5%8F%8B%E5%A5%BD%E6%95%B0%E5%AF%B9-%E5%87%BD%E6%95%B0%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1105-判断友好数对（函数专题）"><a href="#1105-判断友好数对（函数专题）" class="headerlink" title="1105: 判断友好数对（函数专题）"></a>1105: 判断友好数对（函数专题）</h3><p>输入两个正整数m和n，顺序输出m到n之间的所有友好数对。</p>
<p>如果两个整数的所有正因子之和（包括1，不包括自身）等于对方，就称这对数是友好的。例如：1184和1210是友好数对，因为<br>1184的因子之和为1+2+4+8+16+32+37+74+148+296+592=1210<br>1210的因子之和为1+2+5+10+11+22+55+110+121+242+605=1184<br>要求程序定义一个facsum ()函数和一个main()函数，facsum ()函数计算并返回n的所有正因子之和，其余功能在main()函数中实现。<br>int facsum (int n)<br>{<br>//计算n的所有正因子之和sum，本函数返回sum<br>}<br>对于C/C++代码的提交，本题要求必须通过定义facsum函数和main函数实现，否则，提交编译错误，需要提交完整的程序代码。</p>
<p>输入两个正整数m和n，1&lt;m&lt;=n&lt;=10000。</p>
<p>输出m和n之间的所有友好数对。<br>在输出每个友好数对时，要求小数在前、大数在后，并去掉重复的数对。例如，220和284是一对友好数，而284和220也是一对友好数，此时只需输出220和284这对友好数。每个友好数对占一行，两数之间用空格隔开。</p>
<p>如果m和n之间没有友好数对，则输出“No answer”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100 8000</span><br><span class="line">输出</span><br><span class="line">220 284</span><br><span class="line">1184 1210</span><br><span class="line">2620 2924</span><br><span class="line">5020 5564</span><br><span class="line">6232 6368</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">facsum</span> <span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//计算n的所有正因子之和sum，本函数返回sum</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">			sum+=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,flag=<span class="number">0</span>;;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);hu</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//判断返回值 大于 i 说明排除了284和220这类 友好数 因为小数在前 其次判断 返回的值 必须在 m-n之间 最后判断 是否为 友好数</span></span><br><span class="line"> <span class="comment">//1184的因子之和为1+2+4+8+16+32+37+74+148+296+592=1210</span></span><br><span class="line"> <span class="comment">//1210的因子之和为1+2+5+10+11+22+55+110+121+242+605=1184</span></span><br><span class="line">		<span class="keyword">if</span>(facsum(i)&gt;i &amp;&amp; facsum(i)&lt;n &amp;&amp; facsum(facsum(i))==i)&#123; </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,facsum(i));</span><br><span class="line">			flag=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;No answer\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>L1-7 前世档案 (20 分)</title>
    <url>/2021/03/06/L1-7-%E5%89%8D%E4%B8%96%E6%A1%A3%E6%A1%88-20-%E5%88%86/</url>
    <content><![CDATA[<p>L1-7 前世档案 (20 分)</p>
<p><img src="https://images.ptausercontent.com/2ab62885-0642-4a48-b41d-94e4e30d7246.jpg" alt="qs.jpg"></p>
<p>网络世界中时常会遇到这类滑稽的算命小程序，实现原理很简单，随便设计几个问题，根据玩家对每个问题的回答选择一条判断树中的路径（如下图所示），结论就是路径终点对应的那个结点。</p>
<p><img src="https://images.ptausercontent.com/822292db-6097-418b-a245-02e4a2473560.jpg" alt="path.jpg"></p>
<p>现在我们把结论从左到右顺序编号，编号从 1 开始。这里假设回答都是简单的“是”或“否”，又假设回答“是”对应向左的路径，回答“否”对应向右的路径。给定玩家的一系列回答，请你返回其得到的结论的编号。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数：<em>N</em>（≤30）为玩家做一次测试要回答的问题数量；<em>M</em>（≤100）为玩家人数。</p>
<p>随后 <em>M</em> 行，每行顺次给出玩家的 <em>N</em> 个回答。这里用 <code>y</code> 代表“是”，用 <code>n</code> 代表“否”。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个玩家，在一行中输出其对应的结论的编号。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 4</span><br><span class="line">yny</span><br><span class="line">nyy</span><br><span class="line">nyn</span><br><span class="line">yyn</span><br></pre></td></tr></table></figure>

<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;math.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> h,l;<span class="comment">//行列</span></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">31</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;h,&amp;l);</span><br><span class="line">    <span class="keyword">int</span> index,n;</span><br><span class="line">    <span class="keyword">int</span> max=(<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>,h);<span class="comment">//最大结果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;<span class="comment">//人数</span></span><br><span class="line">        index = <span class="number">1</span>;</span><br><span class="line">        n=max;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;h;j++)&#123;<span class="comment">//遍历输入的字符串</span></span><br><span class="line">            <span class="keyword">if</span>(str[j] == <span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">                index += n/<span class="number">2</span>; <span class="comment">//如果是y的话 每次使得 n/2 如果都是n的话  1+4=5 n=4 5+2=7 n=2 7+1=8  如果是n就加上最大结果的一半</span></span><br><span class="line">            &#125;</span><br><span class="line">            n/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>C++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">int</span> nn=<span class="built_in">pow</span>(<span class="number">2</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="keyword">int</span> l=<span class="number">1</span>,r=nn;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line">				r=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				l=r-(r-l)/<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>1127: 矩阵乘积</title>
    <url>/2020/12/14/1127-%E7%9F%A9%E9%98%B5%E4%B9%98%E7%A7%AF/</url>
    <content><![CDATA[<p>计算两个矩阵A和B的乘积</p>
<p><strong>输入</strong></p>
<p>第一行三个正整数m、p和n，0&lt;=m,n,p&lt;=10，表示矩阵A是m行p列，矩阵B是p行n列；<br>接下来的m行是矩阵A的内容，每行p个整数，用空格隔开；<br>最后的p行是矩阵B的内容，每行n个整数，用空格隔开。</p>
<p><strong>输出</strong></p>
<p>输出乘积矩阵：输出占m行，每行n个数据，以空格隔开</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="number">9</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">输出</span><br><span class="line"><span class="number">9</span> <span class="number">10</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">9</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>1.首先了解矩阵乘积</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chengji</span><span class="params">(<span class="keyword">int</span> a[<span class="number">11</span>][<span class="number">11</span>], <span class="keyword">int</span> b[<span class="number">11</span>][<span class="number">11</span>], <span class="keyword">int</span> m, <span class="keyword">int</span> p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; p; k++) &#123;</span><br><span class="line">				sum += a[i][k] * b[k][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sum);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m, p, n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;p, &amp;n);</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">11</span>][<span class="number">11</span>], b[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	chengji(a, b, m, p, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>小汽车的位置</title>
    <url>/2020/11/11/%E5%B0%8F%E6%B1%BD%E8%BD%A6%E7%9A%84%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>有一辆智能小车，最初（时间为0)的位置为(0,0)，我们想知道它最后的位置。小车以每小时10公里的速度向北移动（以北为y轴正向，以东为x轴正向）。小车会受到一系列依照时间戳记排序的命令，1表示“向左转”，2表示“向右转”，3表“停止”。每个命令的前面有一个时间戳记，所以我们知道该命令是何时发出的。最后一个命令一定是“停止”。我们另外假设，这辆小车非常灵活，它可以在瞬间转弯。<br>以下列输入为例。小车在时间为5的时候收到一个“向左转”的命令1，在时间10收到一个“向右转”的命令2，在时间15收到一个“停止”的命令3。那么在最后时间15的时候，小车的位置将在（-50,100）。程序只要求输出小车最后的位置，第一个整数是x坐标，第二个整数是y坐标。</p>
<p>输入包含多个命令，每个命令由整数time和command组成，表示在时刻time发出命令command。command的取值范围1-3，含义如上所述。</p>
<p>输出占一行，包含两个整数，表示小车的最终位置。两个整数之间由空格隔开。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">3</span></span><br><span class="line">样例输出 Copy</span><br><span class="line"><span class="number">-50</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p><strong>提示</strong></p>
<p>（1）数字化。可为四个方向编号，自向北开始，逆时针将4个方向依次编号为0,1,2,3。当接到向左转命令，方向号增1，向右转则方向号减1。为避免出现负数或大于3的情况，可对4取模。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;<span class="comment">//记录小汽车的位置</span></span><br><span class="line">	<span class="keyword">int</span> command;<span class="comment">//存储命令号</span></span><br><span class="line">	<span class="keyword">int</span> preTime=<span class="number">0</span>,curTime;<span class="comment">//存储上次发布命令时间和现在命令时间</span></span><br><span class="line">	<span class="keyword">int</span> direction=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;curTime,&amp;command))&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span>(direction)&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">		y+=<span class="number">10</span>*(curTime-preTime);<span class="keyword">break</span>; <span class="comment">//(0,50)</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		x-=<span class="number">10</span>*(curTime-preTime);<span class="keyword">break</span>;<span class="comment">//(-50,50)十秒时  十五秒时 (-50,100)</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		y-=<span class="number">10</span>*(curTime-preTime);<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		x+=<span class="number">10</span>*(curTime-preTime);<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(command==<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="number">1</span>)&#123;<span class="comment">//向左转方向加一</span></span><br><span class="line">		direction++;<span class="comment">//5秒时方向为1 向左</span></span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="number">2</span>)&#123;<span class="comment">//向右转方向减一</span></span><br><span class="line">		direction--; <span class="comment">//十秒时方向为0</span></span><br><span class="line">	&#125;</span><br><span class="line">	direction=(direction+<span class="number">4</span>)%<span class="number">4</span>;<span class="comment">//对四取余 保证方向在0-3之间</span></span><br><span class="line">	preTime=curTime;<span class="comment">//将当前时间转变为上一次时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x,y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分解质因子</title>
    <url>/2020/11/18/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E5%AD%90/</url>
    <content><![CDATA[<p>将一个正整数分解质因数，例如，输入90，输出2 3 3 5。</p>
<p>输入一个正整数n（2&lt;=n&lt;=2000）。</p>
<p>从小到大输出n的所有质因子，每两个数之间空一格。</p>
<p><strong>提示：</strong></p>
<p>注意，最后一个数后面没有空格！！</p>
<p><strong>程序分析：对 t 进行分解质因数，应先找到一个最小的质数 i ，然后按下述步骤完成：</strong></p>
<p><strong>(1)如果这个质数恰等于（小于的时候，继续执行循环）t，则说明分解质因数的过程已经结束，另外 打印出即可。</strong><br><strong>(2)但 t 能被 i 整除，则应打印出 i 的值，并用 t 除以 i 的商,作为新的正整数 t .重复执行第二步。</strong><br><strong>(3)如果 t 不能被k整除，则用k+1作为k的值,重复执行第一步。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=t;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(t%i==<span class="number">0</span>)&#123; <span class="comment">//循环一层一层分解</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">			t/=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>空心菱形</title>
    <url>/2020/11/13/%E7%A9%BA%E5%BF%83%E8%8F%B1%E5%BD%A2/</url>
    <content><![CDATA[<h3 id="空心菱形"><a href="#空心菱形" class="headerlink" title="空心菱形"></a>空心菱形</h3><p><strong>题目描述</strong></p>
<p>输入一个整数n，（1&lt;=n&lt;=20）,输出一个空心菱形，其中每个边由n个’*’组成。</p>
<p><strong>输入</strong></p>
<p>输入包含一个整数,n（1&lt;=n&lt;=20）</p>
<p><strong>输出</strong></p>
<p>输出一个空心菱形，每个边由n个’*’组成</p>
<p><strong>5</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  *   *</span><br><span class="line"> *     *</span><br><span class="line">*       *</span><br><span class="line"> *     *</span><br><span class="line">  *   *</span><br><span class="line">   * *</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m,t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">2</span>*i<span class="number">-1</span>; k++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			m=k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印下面的*</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">			t=j;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=m-(<span class="number">2</span>*i<span class="number">-1</span>); k&gt;<span class="number">0</span>;k--) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i==(n<span class="number">-1</span>))&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;*\n&quot;</span>);	</span><br><span class="line">	 	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>已知不等式 1！+2！+3！+...+m！‹n,请编程对用户指定的n值计算并输出满足该不等式的m的整数解</title>
    <url>/2020/10/15/%E5%B7%B2%E7%9F%A5%E4%B8%8D%E7%AD%89%E5%BC%8F-1%EF%BC%81-2%EF%BC%81-3%EF%BC%81-m%EF%BC%81%E2%80%B9n-%E8%AF%B7%E7%BC%96%E7%A8%8B%E5%AF%B9%E7%94%A8%E6%88%B7%E6%8C%87%E5%AE%9A%E7%9A%84n%E5%80%BC%E8%AE%A1%E7%AE%97%E5%B9%B6%E8%BE%93%E5%87%BA%E6%BB%A1%E8%B6%B3%E8%AF%A5%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%9A%84m%E7%9A%84%E6%95%B4%E6%95%B0%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">int</span> n,arr[<span class="number">100</span>],a,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;n);</span><br><span class="line">	arr[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="comment">//计算每一项阶乘  存入数组</span></span><br><span class="line">	<span class="keyword">for</span> (a = <span class="number">2</span>; a &lt; <span class="number">100</span>; a++) &#123;</span><br><span class="line">		arr[a]=arr[a<span class="number">-1</span>]*a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//循环遍历 存入的阶乘的数组 计算阶乘的和 与输入的n作比较</span></span><br><span class="line">	<span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;<span class="number">100</span>;a++)&#123;</span><br><span class="line">		sum+=arr[a];</span><br><span class="line">		<span class="keyword">if</span>(sum&gt;=n)&#123;<span class="comment">//如果sun&gt;n的话 说明数组的前一项一定小于n</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;m&lt;=%ld&quot;</span>,a<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>杨治原的个人博客</title>
    <url>/2020/10/10/%E6%9D%A8%E6%B2%BB%E5%8E%9F%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="杨治原的个人博客"><a href="#杨治原的个人博客" class="headerlink" title="杨治原的个人博客"></a>杨治原的个人博客</h1><p>喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String [] args)&#123;</span><br><span class="line"></span><br><span class="line">	System.out.println(&quot;初次见面请多多关照&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，喜欢简约，酷爱小丑，</p>
<a id="more"></a>

<p>初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。初次见面请多多关照。</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>输入一个正整数n,逆序输出n的各位数字，用空格隔开，例如，输入2356，输出6 5 3 2</title>
    <url>/2020/10/27/%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B4%E6%95%B0n-%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BAn%E7%9A%84%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%EF%BC%8C%E7%94%A8%E7%A9%BA%E6%A0%BC%E9%9A%94%E5%BC%80%EF%BC%8C%E4%BE%8B%E5%A6%82%EF%BC%8C%E8%BE%93%E5%85%A52356%EF%BC%8C%E8%BE%93%E5%87%BA6-5-3-2/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,base=<span class="number">1</span>,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    m=n;</span><br><span class="line">    <span class="keyword">while</span>(m&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        m/=<span class="number">10</span>;</span><br><span class="line">        base*=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(base&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        t=n/base;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t);</span><br><span class="line">        n%=base;</span><br><span class="line">        base/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>童年生活二三事（多实例测试）</title>
    <url>/2020/11/24/%E7%AB%A5%E5%B9%B4%E7%94%9F%E6%B4%BB%E4%BA%8C%E4%B8%89%E4%BA%8B(%E5%A4%9A%E5%AE%9E%E4%BE%8B%E6%B5%8B%E8%AF%95)/</url>
    <content><![CDATA[<h3 id="1091-童年生活二三事（多实例测试）"><a href="#1091-童年生活二三事（多实例测试）" class="headerlink" title="1091: 童年生活二三事（多实例测试）"></a>1091: 童年生活二三事（多实例测试）</h3><p>Redraiment小时候走路喜欢蹦蹦跳跳，他最喜欢在楼梯上跳来跳去。 但年幼的他一次只能走上一阶或者一下子蹦上两阶。 现在一共有N阶台阶，请你计算一下Redraiment从第0阶到第N阶共有几种走法。</p>
<p>输入包括多组数据。 每组数据包括一行:**N(1≤N≤40)**。 输入以0结束</p>
<p>对应每个输入包括一个输出。 为redraiment到达第n阶不同走法的数量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">0</span><br><span class="line">输出</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">41</span>];</span><br><span class="line">	<span class="keyword">int</span> i,n;</span><br><span class="line">	a[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//第一台阶跳法</span></span><br><span class="line">	a[<span class="number">2</span>]=<span class="number">2</span>;<span class="comment">//第二台阶跳法</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=<span class="number">40</span>;i++)&#123;<span class="comment">//从第三台阶开始计算</span></span><br><span class="line">		a[i]=a[i<span class="number">-2</span>]+a[i<span class="number">-1</span>];  <span class="comment">//下一个台阶的跳法等于前两个台阶跳法之和  列举找规律</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),n!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[n]);<span class="comment">//输出对应台阶的跳法</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
</search>
